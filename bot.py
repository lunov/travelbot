import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler,
    Dispatcher
)
from flask import Flask, request
from waitress import serve

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
(MAIN_MENU, ROUTE_CHOICE, ZASLAVL, 
 STATION_BELARUS, MLYN, SOBOR, KOSTEL, FINAL) = range(8)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

PORT = int(os.environ.get('PORT', 8000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://independent-trust.up.railway.app')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
updater = Updater(TOKEN, use_context=True)
dp = updater.dispatcher

def setup_webhook():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
        updater.bot.delete_webhook()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        webhook_url = f"{WEBHOOK_URL}/webhook"
        success = updater.bot.set_webhook(
            url=webhook_url,
            max_connections=40,
            drop_pending_updates=True
        )
        
        if success:
            logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            webhook_info = updater.bot.get_webhook_info()
            logger.info(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
            
    except Exception as e:
        logger.critical(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ========== #

def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    photo_url = 'https://img.goodfon.com/original/2388x1668/a/44/sputnik-1-1957-sputnik-1.jpg'
    caption = "–í—ñ—Ç–∞–µ–º —É –±–æ—Ü–µ ¬´–°–ø–∞–¥–∞—Ä–æ–∂–Ω—ñ–∫¬ª! –ì—ç—Ç—ã –±–æ—Ç –¥–∞–ø–∞–º–æ–∂–∞ –≤–∞–º –∞–¥–∫—Ä—ã—Ü—å –¥–ª—è —Å—è–±–µ —Ü—ñ–∫–∞–≤—ã—è –º–∞—Ä—à—Ä—É—Ç—ã."

    keyboard = [[InlineKeyboardButton("–í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data='route_choice')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_photo(
        photo=photo_url,
        caption=caption,
        reply_markup=reply_markup
    )
    return MAIN_MENU

def route_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
    query = update.callback_query
    query.answer()

    text = "–í—ã–±–µ—Ä—ã—Ü–µ –º–∞—Ä—à—Ä—É—Ç, –∫–∞–± –¥–∞–≤–µ–¥–∞—Ü—Ü–∞ –±–æ–ª—å—à:"
    keyboard = [
        [InlineKeyboardButton("–ó–∞—Å–ª–∞–≤–ª—å", callback_data='zaslavl')],
        [InlineKeyboardButton("–†–∞–∫–æ–≤", callback_data='rakov')],
        [InlineKeyboardButton("–†–∞—É–±–∏—á–∏", callback_data='raubichi')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(text=text, reply_markup=reply_markup)
    return ROUTE_CHOICE

def route_in_development(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    query = update.callback_query
    query.answer()

    text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_routes')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(text=text, reply_markup=reply_markup)
    return ROUTE_CHOICE

def zaslavl_info(update: Update, context: CallbackContext) -> int:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ –ó–∞—Å–ª–∞–≤–ª—å"""
    query = update.callback_query
    query.answer()

    text = ("–ú–∞—Ä—à—Ä—É—Ç ¬´–ó–∞—Å–ª–∞–≤–ª—å¬ª:\n\n"
            "–ì–æ—Ä–∞–¥-–º—É–∑–µ–π –ø–∞–¥ –∞–¥–∫—Ä—ã—Ç—ã–º –Ω–µ–±–∞–º –∑ –±–∞–≥–∞—Ç–∞–π –≥—ñ—Å—Ç–æ—Ä—ã—è–π —ñ —Ü—ñ–∫–∞–≤—ã–º—ñ –ø–æ–º–Ω—ñ–∫–∞–º—ñ –∞—Ä—Ö—ñ—Ç—ç–∫—Ç—É—Ä—ã.")
    keyboard = [[InlineKeyboardButton("–ü–∞—á–∞—Ü—å", callback_data='station_belarus')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(text=text, reply_markup=reply_markup)
    return ZASLAVL

def station_belarus(update: Update, context: CallbackContext) -> int:
    """–°—Ç–∞–Ω—Ü–∏—è –ë–µ–ª–∞—Ä—É—Å—å"""
    query = update.callback_query
    query.answer()

    media = [InputMediaPhoto(
        'https://avatars.mds.yandex.net/get-altay/4546519/2a0000017c5b6f2b03411f81c36c607e2985/XXXL',
        caption="–°—Ç–∞–Ω—Ü—ã—è ¬´–ë–µ–ª–∞—Ä—É—Å—å¬ª. –¢—É—Ç –≤—ã –º–æ–∂–∞—Ü–µ –ø–∞—á–∞—Ü—å —Å–≤–∞—ë –ø–∞–¥–∞—Ä–æ–∂–∂–∞.")]

    keyboard = [
        [InlineKeyboardButton("–î–∞–ª–µ–π", callback_data='mlyn')],
        [InlineKeyboardButton("–í—ã–±–∞—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data='back_to_routes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.message.reply_media_group(media=media)
    query.message.reply_text(
        text="–°—Ç–∞–Ω—Ü—ã—è ¬´–ë–µ–ª–∞—Ä—É—Å—å¬ª - –ø–∞—á–∞—Ç–∞–∫ –≤–∞—à–∞–≥–∞ –º–∞—Ä—à—Ä—É—Ç—É.",
        reply_markup=reply_markup
    )
    return STATION_BELARUS

def mlyn(update: Update, context: CallbackContext) -> int:
    """–ú–ª—ã–Ω"""
    query = update.callback_query
    query.answer()

    media = [InputMediaPhoto(
        'https://photocentra.ru/images/main77/771668_main.jpg',
        caption="–ú–ª—ã–Ω - –ø–æ–º–Ω—ñ–∫ —ñ–Ω–¥—É—Å—Ç—Ä—ã—è–ª—å–Ω–∞–π –∞—Ä—Ö—ñ—Ç—ç–∫—Ç—É—Ä—ã.")]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='station_belarus'),
         InlineKeyboardButton("–î–∞–ª–µ–π", callback_data='sobor')],
        [InlineKeyboardButton("–í—ã–±–∞—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data='back_to_routes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.message.reply_media_group(media=media)
    query.message.reply_text(
        text="–ú–ª—ã–Ω - —Ü—ñ–∫–∞–≤—ã –ø–æ–º–Ω—ñ–∫ —ñ–Ω–¥—É—Å—Ç—Ä—ã—è–ª—å–Ω–∞–π –∞—Ä—Ö—ñ—Ç—ç–∫—Ç—É—Ä—ã –ó–∞—Å–ª–∞—û–ª—è.",
        reply_markup=reply_markup
    )
    return MLYN

def sobor(update: Update, context: CallbackContext) -> int:
    """–°–æ–±–æ—Ä"""
    query = update.callback_query
    query.answer()

    media = [InputMediaPhoto(
        'https://azbyka.ru/palomnik/images/b/b7/–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∞—è_—Ü–µ—Ä–∫–æ–≤—å_–∑–∞—Å–ª–∞–≤–ª—å1.jpg',
        caption="–°–ø–∞—Å–∞-–ü—Ä–∞–∞–±—Ä–∞–∂—ç–Ω—Å–∫—ñ —Å–∞–±–æ—Ä - —Ü—ç–Ω—Ç—Ä –¥—É—Ö–æ—û–Ω–∞–≥–∞ –∂—ã—Ü—Ü—è –≥–æ—Ä–∞–¥–∞.")]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='mlyn'),
         InlineKeyboardButton("–î–∞–ª–µ–π", callback_data='kostel')],
        [InlineKeyboardButton("–í—ã–±–∞—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data='back_to_routes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.message.reply_media_group(media=media)
    query.message.reply_text(
        text="–°–ø–∞—Å–∞-–ü—Ä–∞–∞–±—Ä–∞–∂—ç–Ω—Å–∫—ñ —Å–∞–±–æ—Ä - —Ü—ç–Ω—Ç—Ä –¥—É—Ö–æ—û–Ω–∞–≥–∞ –∂—ã—Ü—Ü—è –ó–∞—Å–ª–∞—û–ª—è.",
        reply_markup=reply_markup
    )
    return SOBOR

def kostel(update: Update, context: CallbackContext) -> int:
    """–ö–æ—Å—Ç—ë–ª"""
    query = update.callback_query
    query.answer()

    media = [InputMediaPhoto(
        'https://belarustut.by/wp-content/uploads/slider52/2-min.jpeg',
        caption="–ö–∞—Å—Ü—ë–ª –†–∞–∂—Å—Ç–≤–∞ –î–∑–µ–≤—ã –ú–∞—Ä—ã—ñ - –ø–æ–º–Ω—ñ–∫ –∞—Ä—Ö—ñ—Ç—ç–∫—Ç—É—Ä—ã XVI —Å—Ç–∞–≥–æ–¥–¥–∑—è.")]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='sobor'),
         InlineKeyboardButton("–î–∞–ª–µ–π", callback_data='final')],
        [InlineKeyboardButton("–í—ã–±–∞—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data='back_to_routes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.message.reply_media_group(media=media)
    query.message.reply_text(
        text="–ö–∞—Å—Ü—ë–ª –†–∞–∂—Å—Ç–≤–∞ –î–∑–µ–≤—ã –ú–∞—Ä—ã—ñ - –ø–æ–º–Ω—ñ–∫ –∞—Ä—Ö—ñ—Ç—ç–∫—Ç—É—Ä—ã XVI —Å—Ç–∞–≥–æ–¥–¥–∑—è.",
        reply_markup=reply_markup
    )
    return KOSTEL

def final(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
    query = update.callback_query
    query.answer()

    media = [InputMediaPhoto(
        'https://avatars.mds.yandex.net/get-altay/1246719/2a000001642aaf3789301a7bd185a8c7256c/XXL_height',
        caption="–î–∑—è–∫—É–µ–º –∑–∞ –ø–∞–¥–∞—Ä–æ–∂–∂–∞ –ø–∞ –ó–∞—Å–ª–∞—û–ª—é!")]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='kostel')],
        [InlineKeyboardButton("–í—ã–±–∞—Ä –º–∞—Ä—à—Ä—É—Ç–∞", callback_data='back_to_routes')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.message.reply_media_group(media=media)
    query.message.reply_text(
        text="–î–∑—è–∫—É–µ–º, —à—Ç–æ –∞–±—Ä–∞–ª—ñ –º–∞—Ä—à—Ä—É—Ç ¬´–ó–∞—Å–ª–∞–≤–ª—å¬ª! –°–ø–∞–¥–∑—è–µ–º—Å—è, –≤–∞–º —Å–ø–∞–¥–∞–±–∞–ª–∞—Å—è.",
        reply_markup=reply_markup
    )
    return FINAL

# ========== WEBHOOK –ò –ó–ê–ü–£–°–ö ========== #

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':
        try:
            json_data = request.get_json()
            update = Update.de_json(json_data, updater.bot)
            dp.process_update(update)
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return 'ok', 200
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            return 'error', 200
    
    return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –¥–ª—è Telegram webhook", 200

@app.route('/')
def index():
    return f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ–±—Ö—É–∫: {WEBHOOK_URL}/webhook", 200

@app.route('/set_webhook')
def set_webhook_route():
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    setup_webhook()
    return "–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 200

def setup_dispatcher():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(route_choice, pattern='^route_choice$')],
            ROUTE_CHOICE: [
                CallbackQueryHandler(zaslavl_info, pattern='^zaslavl$'),
                CallbackQueryHandler(route_in_development, pattern='^rakov$'),
                CallbackQueryHandler(route_in_development, pattern='^raubichi$'),
                CallbackQueryHandler(route_choice, pattern='^back_to_routes$')
            ],
            ZASLAVL: [CallbackQueryHandler(station_belarus, pattern='^station_belarus$')],
            STATION_BELARUS: [
                CallbackQueryHandler(mlyn, pattern='^mlyn$'),
                CallbackQueryHandler(route_choice, pattern='^back_to_routes$')
            ],
            MLYN: [
                CallbackQueryHandler(station_belarus, pattern='^station_belarus$'),
                CallbackQueryHandler(sobor, pattern='^sobor$'),
                CallbackQueryHandler(route_choice, pattern='^back_to_routes$')
            ],
            SOBOR: [
                CallbackQueryHandler(mlyn, pattern='^mlyn$'),
                CallbackQueryHandler(kostel, pattern='^kostel$'),
                CallbackQueryHandler(route_choice, pattern='^back_to_routes$')
            ],
            KOSTEL: [
                CallbackQueryHandler(sobor, pattern='^sobor$'),
                CallbackQueryHandler(final, pattern='^final$'),
                CallbackQueryHandler(route_choice, pattern='^back_to_routes$')
            ],
            FINAL: [
                CallbackQueryHandler(kostel, pattern='^kostel$'),
                CallbackQueryHandler(route_choice, pattern='^back_to_routes$')
            ]
        },
        fallbacks=[CommandHandler('start', start)],
    )
    dp.add_handler(conv_handler)

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setup_dispatcher()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    setup_webhook()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    serve(app, host="0.0.0.0", port=PORT)
